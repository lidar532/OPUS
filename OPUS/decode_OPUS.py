# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/decode_OPUS.ipynb.

# %% auto 0
__all__ = ['decode_OPUS']

# %% ../nbs/decode_OPUS.ipynb 7
import datetime as dt
import numpy    as np
import time 

# %% ../nbs/decode_OPUS.ipynb 11
def decode_OPUS(
  txt='',        # A string containing the contents of an entire OPUS report.
  opus_file=''   # A filename of an OPUS Report.
) -> object:      # Decoded class variable of the OPUS report.
  '''
  Decoder for NOAA NGS OPUS reports.
  '''
  if txt:
    opus_txt = txt
  elif opus_file:
    with open(opus_file, 'r') as f:
      opus_txt = f.read()
  else:
    raise Exception('No input provided.')
  class POINT:
    pass
  class OPUS:
    pass
  class STRINGS:
    pass
  opus             = OPUS()
  opus.nad83       = POINT()
  opus.itrf        = POINT()
  opus.state_plane = POINT()
  opus.strings     = STRINGS()
  for row in opus_txt.split('\n'):
    
    ts = row[29:70].strip()
    if ts == 'NGS OPUS SOLUTION REPORT':
      opus.title = ts
    elif ts == 'NGS OPUS-RS SOLUTION REPORT':
      opus.title = ts

    elif row[23:30].strip()       == 'UTM (':
      opus.strings.utm             = row[34:37].strip()
      opus.utm_zone                = int( opus.strings.utm )
      opus.strings.state_plane_key = ts = row[47:51].strip()  # "SPC"
      if ts == "SPC":
        opus.strings.state_plane_id= row[52:62].strip("() ")
        opus.state_plane.id        = opus.strings.state_plane_id

    elif row[0:9].strip()  == 'Northing':
      opus.strings.northing = row[23:37]
      opus.northing         = float( opus.strings.northing )
      if opus.strings.state_plane_key == 'SPC':
        opus.strings.state_plane_northing = ts = row[45:59].strip()
        opus.state_plane.northing = float(opus.strings.state_plane_northing)

    elif row[0:8].strip()  == 'Easting':
      opus.strings.easting  = row[23:37]
      opus.easting          = float( opus.strings.easting )
      if opus.strings.state_plane_key == 'SPC':
        opus.strings.state_plane_easting = ts = row[45:59].strip()
        opus.state_plane.easting = float(opus.strings.state_plane_easting)

    elif row[0:12].strip()    == 'USER:':
      opus.user                = row[11:50].strip()
      opus.strings.run_datestr = ts = row[58:73].strip()
      opus.run_date            = dt.datetime.strptime( ts, "%B %d, %Y")

    elif row[0:12].strip() == 'SOFTWARE:':
      opus.software         = row[12:51].strip()
      opus.strings.start    = ts = row[58:81].strip()
      opus.start            = dt.datetime.strptime(ts, "%Y/%m/%d %H:%M:%S" )

    elif row[0:12].strip() == 'RINEX FILE:':
      opus.rinex_file       = opus.strings.rinex_file = row[11:25].strip()
      opus.strings.run_time = row[58:73].strip()
      opus.run_datetime     = dt.datetime.strptime(opus.strings.run_datestr + " " +
                                                   opus.strings.run_time,
                                                   "%B %d, %Y %H:%M:%S UTC")
      #opus.run_time         = dt.datetime.strptime(ts, "%H:%M:%S" )

    elif row[0:12].strip() == 'EPHEMERIS:':
      opus.ephermis         = row[25:38].strip('[] ')
      opus.strings.stop     = ts = row[58:81].strip()
      opus.stop             = dt.datetime.strptime(ts, "%Y/%m/%d %H:%M:%S" )

    elif row[0:12].strip() == 'ANT NAME:':
      opus.ant_name         = row[11:42].strip()

    elif row[0:12].strip() == 'ARP HEIGHT:':
      opus.strings.arp_height = row[11:17].strip()
      opus.arp_height         = float( opus.strings.arp_height )

    elif row[0:12].strip() == 'REF FRAME:':
      #opus.ref_frame        =  row[11:81].strip()
      opus.strings.nad83_ref_frame = ts = row[11:45].strip()
      opus.nad83.ref_frame  = ts
      opus.strings.itfr_ref_frame  = ts = row[50:81].strip()
      opus.itrf.ref_frame  = ts

    elif row[0:12].strip() ==   'X:':
      opus.strings.nad83_x  = row[15:28]
      opus.nad83.x          = float( opus.strings.nad83_x )
      opus.strings.itrf_x   = row[51:64]
      opus.itrf.x           = float( opus.strings.itrf_x )

    elif row[0:12].strip() ==   'Y:':
      opus.strings.nad83_y  = row[15:28]
      opus.nad83.y          = float( opus.strings.nad83_y )
      opus.strings.itrf_y   = row[51:64]
      opus.itrf.y           = float( opus.strings.itrf_y )

    elif row[0:12].strip() ==   'Z:':
      opus.strings.nad83_z  = row[15:28]
      opus.nad83.z          = float( opus.strings.nad83_z )
      opus.strings.itrf_z   = row[51:64]
      opus.itrf.z           = float( opus.strings.itrf_z )

    elif row[0:12].strip() == 'LAT:':
      st = opus.strings.nad83_lat = row[13:16], row[17:19], row[20:28]
      if float(st[0] ) < 0.0:
        nsf = -1.0
      else:
        nsf = 1.0
      opus.nad83.lat = nsf*np.sum( [abs(float(st[0])), float(st[1])/60, float( st[2])/3600.0])
      st = opus.strings.itrf_lat  = row[49:52], row[53:55], row[56:64]
      opus.itrf.lat = nsf*np.sum( [ abs(float(st[0])), float(st[1])/60, float( st[2])/3600.0])
      ts = opus.strings.lat_rms = row[32:39].strip()
      opus.lat_rms  = float(ts)

    elif row[0:12].strip() == 'W LON:':
      st = opus.strings.nad83_lon = row[13:16], row[17:19], row[20:28]
      opus.nad83.lon = -np.sum( [float(st[0]), float(st[1])/60, float( st[2])/3600.0])
      st = opus.strings.itrf_lon = row[49:52], row[53:55], row[56:64]
      opus.itrf.lon = -np.sum( [float(st[0]), float(st[1])/60, float( st[2])/3600.0])
      ts = opus.strings.lon_rms = row[32:39].strip()
      opus.lon_rms  = float(ts)

    elif row[0:12].strip() == 'EL HGT:':
      st = opus.strings.nad83_el_hgt = row[19:28]
      opus.nad83.el_hgt = float(st)
      st = opus.strings.itrf_el_hgt  = row[55:64]
      opus.itrf.el_hgt = float(st)
      ts = opus.strings.el_rms = row[32:39].strip()
      opus.el_rms  = float(ts)

    elif row[0:12].strip() == 'ORTHO HGT:':
      st = opus.strings.navd88_hgt = row[19:28]
      try:
        opus.nad83.navd88_hgt = float(st)
      except:
        opus.nad83.navd88_hgt = row[12:45].strip()


    elif row[0:28].strip() == 'US NATIONAL GRID DESIGNATOR:':
      opus.us_grid = row[28:44].strip()
  return opus
